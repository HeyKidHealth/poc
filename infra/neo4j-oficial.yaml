{
  "Description": "Neo4j on AWS - creates a variable number of EC2 Ubuntu machines, a VPC, elastic IP addresses, and deploys the Neo4j Graph Database cluster on it.  **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
  "AWSTemplateFormatVersion": "2010-09-09",
  "Mappings": {
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "64": "ami-0f6db720c2e3c7b68"
      },
      "us-east-2": {
        "64": "ami-0fb1bfc37c06d0008"
      },
      "us-west-1": {
        "64": "ami-00d82e0b875e505dc"
      },
      "us-west-2": {
        "64": "ami-084b94e5c357b909e"
      },
      "eu-west-1": {
        "64": "ami-0572a469fb0d71326"
      },
      "eu-central-1": {
        "64": "ami-05f30083fe95f0fd4"
      },
      "ap-southeast-1": {
        "64": "ami-0cf36d7ad51a09a42"
      },
      "ap-northeast-1": {
        "64": "ami-0e4929e7322b378dd"
      },
      "ap-south-1": {
        "64": "ami-0c9855c2d5f1c6527"
      },
      "sa-east-1": {
        "64": "ami-019a244d7af21895c"
      }
    }
  },
  "Parameters": {
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "m4.large",
      "AllowedValues": [
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge",
        "m5.12xlarge",
        "m5.24xlarge",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "x1e.16xlarge",
        "x1e.8xlarge",
        "x1e.4xlarge",
        "x1e.2xlarge",
        "x1e.xlarge",
        "x1.16xlarge",
        "r4.large",
        "r4.xlarge",
        "r4.2xlarge",
        "r4.4xlarge",
        "r4.8xlarge",
        "r4.16xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type."
    },
    "SSHKeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "AllowedPattern": ".+"
    },
    "NetworkWhitelist": {
      "Description": " The IP address range that can be used to connect to Neo4j",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.  For example, 0.0.0.0/0 for open internet access."
    },
    "Password": {
      "NoEcho": true,
      "Description": "initial neo4j password (uppercase, lowercase, and numbers only)",
      "Type": "String",
      "MinLength": 8,
      "MaxLength": 40,
      "AllowedPattern": "^[a-zA-Z0-9\\.-]+$"
    },
    "VolumeType": {
      "Description": "What kind of storage to attach",
      "Type": "String",
      "Default": "gp2",
      "AllowedValues": [
        "io1",
        "gp2",
        "st1"
      ]
    },
    "VolumeSizeGB": {
      "Description": "How much EBS storage is allocated to each cluster node, in GiB",
      "Type": "Number",
      "Default": "100",
      "MinValue": "10",
      "MaxValue": "1000",
      "ConstraintDescription": "Must be a valid EBS disk size in GiB."
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "InstanceTenancy": "default",
        "CidrBlock": "10.0.0.0/16",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "Neo4jVPC",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.0.0/24",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "Neo4jSubnet",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ],
        "MapPublicIpOnLaunch": "true"
      }
    },
    "SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "SubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet"
        },
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        }
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "Neo4jGateway",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "Neo4jRouteTable",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "DestinationCidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "NetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "SSHIngressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "SSHEgressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "BoltIngressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "7689",
          "To": "7689"
        }
      }
    },
    "BoltEgressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "104",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "7689",
          "To": "7689"
        }
      }
    },
    "Neo4jHTTPSIngressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "7473",
          "To": "7473"
        }
      }
    },
    "Neo4jHTTPSEgressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "106",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "7473",
          "To": "7473"
        }
      }
    },
    "HTTPSIngressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "104",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "HTTPSEgressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "108",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "HTTPIngressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "105",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "HTTPEgressNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "110",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "InboundResponsePortsNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "300",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "OutBoundResponsePortsNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "301",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": {
          "Ref": "NetworkWhitelist"
        },
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "ReadOwnTags": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "work-with-tags",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ec2:CreateTags",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "ec2:Describe*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "elasticloadbalancing:Describe*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:ListMetrics",
                    "cloudwatch:GetMetricStatistics",
                    "cloudwatch:Describe*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "autoscaling:Describe*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "instProfNeo4jEnterprise": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "ReadOwnTags"
          }
        ],
        "InstanceProfileName": {
          "Fn::Join": [
            "-",
            [
              "read-own-tags-ip",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        }
      }
    },
    "sgNeo4jEnterprise": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Neo4j Ports",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "NetworkWhitelist"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "7687",
            "ToPort": "7687",
            "CidrIp": {
              "Ref": "NetworkWhitelist"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "7473",
            "ToPort": "7473",
            "CidrIp": {
              "Ref": "NetworkWhitelist"
            }
          }
        ]
      }
    },
    "Neo4jServer": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "instProfNeo4jEnterprise"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "DisableApiTermination": "FALSE",
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            "64"
          ]
        },
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "sgNeo4jEnterprise"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "Subnet"
            }
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "neo4j-vm",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "neo4j_mode",
            "Value": "SINGLE"
          },
          {
            "Key": "dbms_mode",
            "Value": "SINGLE"
          },
          {
            "Key": "initial_password",
            "Value": {
              "Ref": "Password"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "#\n",
                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                "LOGFILE=/home/ubuntu/setup.log\n",
                "echo `date` 'Preparing Standalone Neo4j Node' | tee -a $LOGFILE\n",
                "\n",
                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                "export API=http://169.254.169.254/latest/\n",
                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                "env | tee -a $LOGFILE\n",
                "# Tag volumes, which CloudFormation does not allow\n",
                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Volume $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                "\n",
                "# Loop waiting for neo4j service to start.\n",
                "while true; do\n",
                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                "\n",
                "        curl -v -H 'Content-Type: application/json' \\n",
                "                -XPOST -d '{\"password\":\"",
                {
                  "Ref": "Password"
                },
                "\"}' \\\n",
                "                -u neo4j:neo4j \\\n",
                "                http://localhost:7474/user/neo4j/password \\\n",
                "                2>&1 | tee -a $LOGFILE\n",
                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                "\n",
                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                "        break\n",
                "    fi\n",
                "\n",
                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                "    sleep 1\n",
                "done"
              ]
            ]
          }
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": {
                "Ref": "VolumeType"
              },
              "VolumeSize": {
                "Ref": "VolumeSizeGB"
              },
              "DeleteOnTermination": "true"
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "Note": {
      "Value": {
        "Fn::Join": [
          "\n",
          [
            "Your node is deployed, and currently forming.",
            "URL below should be available within a few minutes"
          ]
        ]
      }
    },
    "IMPORTANT": {
      "Value": {
        "Fn::Join": [
          "\n",
          [
            "PLEASE TAKE NOTE!  Your instance begins with an unsigned ",
            "SSL certificate.  This means that in order to access your ",
            "new system, you should configure your browser to trust this ",
            "IP address on **both** port 7473 **and** port 7687, otherwise ",
            "you may have issues connecting. ",
            "For more information see https://community.neo4j.com/t/troubleshooting-connection-issues-to-neo4j/129"
          ]
        ]
      }
    },
    "Neo4jWebadmin": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "Neo4jServer",
                "PublicIp"
              ]
            },
            ":7473/"
          ]
        ]
      },
      "Description": "This is the address of your Neo4j server web administration console."
    },
    "Username": {
      "Value": "neo4j"
    },
    "Password": {
      "Value": {
        "Ref": "Password"
      }
    },
    "SSH": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "ssh -i ${HOME}/.ssh/",
            {
              "Ref": "SSHKeyName"
            },
            ".pem -l ubuntu@",
            {
              "Fn::GetAtt": [
                "Neo4jServer",
                "PublicIp"
              ]
            }
          ]
        ]
      },
      "Description": "This is how you gain remote access to the machine."
    }
  }
}